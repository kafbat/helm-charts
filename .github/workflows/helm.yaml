name: Helm linter
on:
 pull_request:
  types: ["opened", "edited", "reopened", "synchronize"]
  branches:
   - 'main'
  paths:
   - "charts/**"
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Helm tool installer
        uses: Azure/setup-helm@v3

      - name: Login to Github Packages
        run: echo "${{ github.token }}" | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin

      #check, was helm version increased in Chart.yaml?
      - name: Check version
        shell: bash
        run: |
          helm_version_new=$(cat charts/kafka-ui/Chart.yaml  | grep version | awk  '{print $2}')
          helm_version_old=$(curl -s https://raw.githubusercontent.com/kafbat/helm-charts/main/charts/kafka-ui/Chart.yaml |   grep version | awk  '{print $2}' )
          echo $helm_version_old
          echo $helm_version_new
          if [[ "$helm_version_new" > "$helm_version_old" ]]; then exit 0 ; else exit 1 ; fi

      - name: Pull kubeconform image
        run: docker pull ghcr.io/yannh/kubeconform:latest

      - name: Run kubeconform
        shell: bash
        run: |
          set -euo pipefail
          sed -i "s@enabled: false@enabled: true@g" charts/kafka-ui/values.yaml
          K8S_VERSIONS=$(
            git ls-remote --refs --tags https://github.com/kubernetes/kubernetes.git |
            cut -d/ -f3                              | # v1.31.0, v1.31.0^{}, …
            grep -E  '^v1\.[0-9]{2}\.0$'             | # v1.19.0 … v1.33.0
            grep -vE '^v1\.1[0-8]\.0$'               | # 1.10-1.18
            sort -Vu                                 | # unique/sort
            sed 's/^v//'                               # remove prefix 
          )
          echo ""
          for version in $K8S_VERSIONS; do
            helm template \
              --kube-version "$version" \
              --set ingress.enabled=true \
              charts/kafka-ui \
              -f charts/kafka-ui/values.yaml | \
            docker run --rm -i ghcr.io/yannh/kubeconform:latest \
              -strict -summary -kubernetes-version "$version" -
          done